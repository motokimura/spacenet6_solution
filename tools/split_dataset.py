#!/usr/bin/env python3
# this script splits train dataset into train and val splits

import json
import numpy as np
import os


def check_filename_validity(data_list):
    N = len(data_list)
    for i in range(N):
        data = data_list[i]

        polygon_filename = data['Buildings']
        ms_image_filename = data['MS']
        pan_image_filename = data['PAN']
        psms_image_filename = data['PS-MS']
        rgb_image_filename = data['PS-RGB']
        sar_image_filename = data['SAR-Intensity']
        mask_filename = data['Mask']

        # check if the filenames are valid
        assert polygon_filename[:37] == 'SN6_Train_AOI_11_Rotterdam_Buildings_'
        assert polygon_filename[-8:] == '.geojson'

        assert ms_image_filename[:30] == 'SN6_Train_AOI_11_Rotterdam_MS_'
        assert ms_image_filename[-4:] == '.tif'

        assert pan_image_filename[:31] == 'SN6_Train_AOI_11_Rotterdam_PAN_'
        assert pan_image_filename[-4:] == '.tif'

        assert psms_image_filename[:33] == 'SN6_Train_AOI_11_Rotterdam_PS-MS_'
        assert psms_image_filename[-4:] == '.tif'

        assert rgb_image_filename[:34] == 'SN6_Train_AOI_11_Rotterdam_PS-RGB_'
        assert rgb_image_filename[-4:] == '.tif'

        assert sar_image_filename[:41] == 'SN6_Train_AOI_11_Rotterdam_SAR-Intensity_'
        assert sar_image_filename[-4:] == '.tif'

        assert mask_filename[:37] == 'SN6_Train_AOI_11_Rotterdam_Buildings_'
        assert mask_filename[-12:] == '.geojson.png'

        # check if ids match
        identity = polygon_filename[37:-8]
        assert ms_image_filename[30:-4] == identity
        assert pan_image_filename[31:-4] == identity
        assert psms_image_filename[33:-4] == identity
        assert rgb_image_filename[34:-4] == identity
        assert sar_image_filename[41:-4] == identity
        assert mask_filename[37:-12] == identity


def dump_to_file(out_path, data_list):
    N = len(data_list)
    with open(out_path, 'w') as f:
        json.dump(
            data_list,
            f,
            ensure_ascii=False,
            indent=4,
            sort_keys=False,
            separators=(',', ': ')
        )


if __name__ == '__main__':
    # parameters
    data_dir = '/data/spacenet6/spacenet6/train/'
    mask_dir = '/data/spacenet6/footprint_boundary_mask/labels/'
    out_dir = '/data/split/'
    train_val_split_ratio = (0.8, 0.2)
    seed = 0

    np.random.seed(seed)

    os.makedirs(out_dir, exist_ok=True)

    # Building polygon
    polygon_dir = os.path.join(data_dir, 'Buildings')
    polygon_filenames = os.listdir(polygon_dir)
    polygon_filenames.sort()

    # Multi-spectral
    ms_image_dir = os.path.join(data_dir, 'MS')
    ms_image_filenames = os.listdir(ms_image_dir)
    ms_image_filenames.sort()

    # Panchromatic
    pan_image_dir = os.path.join(data_dir, 'PAN')
    pan_image_filenames = os.listdir(pan_image_dir)
    pan_image_filenames.sort()

    # Pan-sharpened Multi-spectral
    psms_image_dir = os.path.join(data_dir, 'PS-MS')
    psms_image_filenames = os.listdir(psms_image_dir)
    psms_image_filenames.sort()

    # Pan-sharpened RGB
    rgb_image_dir = os.path.join(data_dir, 'PS-RGB')
    rgb_image_filenames = os.listdir(rgb_image_dir)
    rgb_image_filenames.sort()

    # SAR intensity
    sar_image_dir = os.path.join(data_dir, 'SAR-Intensity')
    sar_image_filenames = os.listdir(sar_image_dir)
    sar_image_filenames.sort()

    # Building mask (generated by geojson_to_mask.py)
    mask_filenames = os.listdir(mask_dir)
    mask_filenames.sort()

    N = 3401
    assert len(polygon_filenames) == N
    assert len(ms_image_filenames) == N
    assert len(pan_image_filenames) == N
    assert len(psms_image_filenames) == N
    assert len(rgb_image_filenames) == N
    assert len(sar_image_filenames) == N
    assert len(mask_filenames) == N

    data_list = []
    for i in range(N):
        polygon_filename = polygon_filenames[i]
        ms_image_filename = ms_image_filenames[i]
        pan_image_filename = pan_image_filenames[i]
        psms_image_filename = psms_image_filenames[i]
        rgb_image_filename = rgb_image_filenames[i]
        sar_image_filename = sar_image_filenames[i]
        mask_filename = mask_filenames[i]

        data_list.append(
            {
                'Buildings': polygon_filename,
                'MS': ms_image_filename,
                'PAN': pan_image_filename,
                'PS-MS': psms_image_filename,
                'PS-RGB': rgb_image_filename,
                'SAR-Intensity': sar_image_filename,
                'Mask': mask_filename
            }
        )

    # check order of data_list
    check_filename_validity(data_list)

    # shufffle data_list and split into train/val
    np.random.shuffle(data_list)

    ratio_train, ratio_val = train_val_split_ratio
    N_train = int(N * ratio_train / (ratio_train + ratio_val))
    train_list = data_list[:N_train]
    val_list = data_list[N_train:]

    # dump train_list and val_list as json file
    dump_to_file(os.path.join(out_dir, 'train.json'), train_list)
    dump_to_file(os.path.join(out_dir, 'val.json'), val_list)
